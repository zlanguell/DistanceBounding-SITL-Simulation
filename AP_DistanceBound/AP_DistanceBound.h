#pragma once

#include <AP_ADSB/AP_ADSB.h>
#include <AP_AHRS/AP_AHRS.h>
#include <AP_Common/AP_Common.h>
#include <AP_Param/AP_Param.h>
#include <AP_Common/Location.h>
#include <GCS_MAVLink/GCS_MAVLink.h>
#include "SITL/SIM_Aircraft.h"
#include "SITL/SIM_ADSB.h"
#include "SITL/SITL.h"
#include <stdio.h>
#include <bitset>


class AP_DistanceBound {
public:
    static const struct AP_Param::GroupInfo var_info[];
    static const bool LOGGING_TO_FILE = true; //enable creation of log files
    static const uint32_t c_ms = 299792458; //speed of light m/s

    // security parameters
    static const int nonce_size = 256; //bitsize of nonce
    static const int secret_key_size = 256; //bitsize of secret shared key
    static const int nonce_size_bytes = nonce_size/8; //byte size of nonce
    static const int secret_key_size_bytes = secret_key_size/8; //byte size of secret shared key
    struct security_param_struct {
        uint8_t n; //number of iterations
        uint8_t r; //number of rounds
        uint32_t k; //size of secret key
        uint32_t s; //size of nonces v and p
    };


    // distance-bounding parameters
    static const int rounds_per_challenge = 16; //number of rounds per challenge
    static const int num_of_challenges = 3; //number of challenges
    static const int total_rounds = rounds_per_challenge * num_of_challenges; //total rounds (rounds * challenges) also known as n
    static const int bit_sequence_size = total_rounds; //bitsize of R0/R1, hash needs to produce 2n to split into these
    uint32_t max_wait_time; //maximum wait time between challenges obtained from vehicle
    static const int fail_threshold = total_rounds/4; //how many rounds can fail before distancebound is a fail

    // finalization variables
    static const int tp_stdev_limit = 3;
    double tp_upperbound;

    //Vehicle parameters
    double processing_time; // reliable processing time for prover in us
    double tp_noise_error; // noise
    double adsb_velocity_error;
    double adsb_position_error;


    void setup(AP_ADSB::adsb_vehicle_t new_vehicle);
    AP_DistanceBound(AP_ADSB::adsb_vehicle_t new_vehicle);


private:
    std::string _log_path = "/home/zachary/Desktop/ardupilot/libraries/AP_DistanceBound/logs";
    unsigned char _S[nonce_size];  //nonce for Hash function
    unsigned char _K[secret_key_size]; //shared secret key for Hash function
    std::bitset<bit_sequence_size> _R0; //bitset 0
    std::bitset<bit_sequence_size> _R1; //bitset 1
    std::bitset<total_rounds> _challenges; //challenges generated by the verifier
    std::bitset<total_rounds> _responses; //responses from prover

    double _timestamps_for_responses[total_rounds]; //time elapsed for each challenge/response in microseconds
    uint32_t _adsb_msg_time;
    uint32_t _fast_round_start_time;
    uint32_t _round_start_time[num_of_challenges];
    uint32_t _random_wait_times[num_of_challenges];
    double _estimated_distance[num_of_challenges];
    SITL::SITL *_sitl;
    Location_Class  _my_loc;
    SITL::ADSB_Vehicle _other_vehicle;
    AP_DistanceBound::security_param_struct _sec_params;
    AP_ADSB::adsb_vehicle_t _vehicle;

    void distanceBounding();
    void finalize();
    double distance_after_time(AP_ADSB::adsb_vehicle_t vehi, float time_passed_s);
    void random_hash_function(unsigned char* nonceA, unsigned char* nonceB, unsigned char* k);

    // logging functions
    void createJsonLog(double *calculated_distance, double average_time_p);
};
